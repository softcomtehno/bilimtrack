// import { AllCommunityModule, ModuleRegistry } from 'ag-grid-community'
// ModuleRegistry.registerModules([AllCommunityModule])
// import { AgGridReact } from 'ag-grid-react'
// import { useMemo, useState } from 'react'

// export function GradeBook() {
//   // –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã
//   const generateRandomScore = () => Math.floor(Math.random() * 11)

//   const dates = [
//     '05_05_2025',
//     '06_05_2025',
//     '07_05_2025',
//     '08_05_2025',
//     '09_05_2025',
//     '10_05_2025',
//     '11_05_2025',
//     '12_05_2025',
//     '13_05_2025',
//     '14_05_2025',
//     '15_05_2025',
//     '16_05_2025',
//     '17_05_2025',
//     '18_05_2025',
//     '19_05_2025',
//   ]

//   const users = [
//     '–ê—Å–∞–Ω–æ–≤ –ö—É—Ä–º–∞–Ω–±–µ–∫',
//     '–ú–∞–ª–∞–±–∞–∫–∏–µ–≤ –†–∞–º–∑–∞–Ω',
//     '–ñ—É–º–∞–≥—É–ª–æ–≤ –¢–∞–ª–≥–∞—Ç',
//     '–ò—Å–∞–∫–æ–≤ –†—É—Å–ª–∞–Ω',
//     '–ö–∞–¥—ã—Ä–æ–≤ –≠–ª—å–¥–∞—Ä',
//     '–õ–∞–∑–∞—Ä–µ–≤ –ú–∞–∫—Å–∏–º',
//     '–ú–∏—Ä–∑–æ–µ–≤ –ë–∞—Ö—Ç–∏—ë—Ä',
//     '–ù—É—Ä–º–∞—Ç–æ–≤ –ê–∑–∞—Ç',
//     '–û—Ä–ª–æ–≤ –ò–ª—å—è',
//     '–ü–µ—Ç—Ä–æ–≤ –°–µ—Ä–≥–µ–π',
//     '–†–∞—Ö–∏–º–æ–≤ –®–∞—Ö—Ä–∏—ë—Ä',
//     '–°–º–∏—Ä–Ω–æ–≤–∞ –û–ª—å–≥–∞',
//     '–¢–∏–º–æ—Ñ–µ–µ–≤ –ê–Ω–¥—Ä–µ–π',
//     '–£–º–∞—Ä–æ–≤ –ó–∞—É—Ä',
//     '–§–µ–¥–æ—Ä–æ–≤ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω',
//     '–•–∞–±–∏–±—É–ª–ª–∏–Ω –†–∏–Ω–∞—Ç',
//     '–¶–æ–π –í–∏–∫—Ç–æ—Ä',
//     '–ß–∏—Å—Ç—è–∫–æ–≤ –ê—Ä—Ç—ë–º',
//     '–®–∞—Ä–∏–ø–æ–≤ –ê—Ä—Å–ª–∞–Ω',
//     '–©–µ—Ä–±–∞–∫–æ–≤–∞ –ú–∞—Ä–∏—è',
//   ]

//   const initialRowData = users.map((fullName) => {
//     const scores = {}
//     dates.forEach((date) => {
//       scores[date] = generateRandomScore()
//     })
//     return { fullName, ...scores }
//   })

//   // –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
//   const todayDate = new Date().toLocaleDateString('ru-RU')
//   const todaySafe = todayDate.replace(/\./g, '_') // 'dd_mm_yyyy'

//   // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –º–µ–Ω—è—Ç—å –æ—Ü–µ–Ω–∫–∏ –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ
//   const [rowData, setRowData] = useState(() => {
//     // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–≥–æ–¥–Ω—è –≤ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω–µ—Ç
//     return initialRowData.map((row) => {
//       if (!(todaySafe in row)) {
//         return { ...row, [todaySafe]: 0 } // –º–æ–∂–Ω–æ 0 –∏–ª–∏ null –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
//       }
//       return row
//     })
//   })

//   // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å —É—á—ë—Ç–æ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã
//   const columnDefs = useMemo(() => {
//     const baseFields = ['fullName']
//     // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö, –≤–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é
//     const allDateFieldsSet = new Set<string>()

//     rowData.forEach((row) => {
//       Object.keys(row).forEach((key) => {
//         if (!baseFields.includes(key)) {
//           allDateFieldsSet.add(key)
//         }
//       })
//     })

//     // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã —Ç–∞–∫, —á—Ç–æ–±—ã —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –±—ã–ª–∞ –ø–µ—Ä–≤–æ–π
//     let allDateFields = Array.from(allDateFieldsSet)
//     allDateFields = allDateFields.sort((a, b) => {
//       if (a === todaySafe) return -1
//       if (b === todaySafe) return 1
//       // —Å–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
//       return b.localeCompare(a)
//     })

//     return [
//       { field: 'fullName', headerName: '–§–ò–û', filter: true },
//       ...allDateFields.map((field) => ({
//         field,
//         width: 110,
//         headerName: field.replace(/_/g, '.'),
//         editable: field === todaySafe,
//         valueSetter: (params: any) => {
//           let value = Number(params.newValue)
//           if (isNaN(value)) return false
//           if (value < 0) value = 0
//           if (value > 10) value = 10
//           params.data[field] = value
//           // –û–±–Ω–æ–≤–ª—è–µ–º rowData, —á—Ç–æ–±—ã React –æ–±–Ω–æ–≤–∏–ª –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
//           setRowData((prev) =>
//             prev.map((r) =>
//               r.fullName === params.data.fullName ? params.data : r
//             )
//           )
//           return true
//         },
//       })),
//     ]
//   }, [rowData, todaySafe])

//   return (
//     <div>
//       <AgGridReact
//         rowData={rowData}
//         columnDefs={columnDefs}
//         domLayout="autoHeight"
//         pagination={true}
//         paginationPageSize={30}
//         paginationPageSizeSelector={[5, 10, 15, 20, 25, 30, 40]}
//       />
//     </div>
//   )
// }

import { AllCommunityModule, ModuleRegistry } from 'ag-grid-community'
ModuleRegistry.registerModules([AllCommunityModule])
import { AgGridReact } from 'ag-grid-react'
import { Pagination } from '@heroui/react'
import { useMemo, useState } from 'react'

export function GradeBook() {
  const generateRandomScore = () => Math.floor(Math.random() * 11)

  const dates = [
    '05_05_2025', '06_05_2025', '07_05_2025', '08_05_2025', '09_05_2025',
    '10_05_2025', '11_05_2025', '12_05_2025', '13_05_2025', '14_05_2025',
    '15_05_2025', '16_05_2025', '17_05_2025', '18_05_2025', '19_05_2025',
  ]

  const users = [
    '–ê—Å–∞–Ω–æ–≤ –ö—É—Ä–º–∞–Ω–±–µ–∫',
    '–ú–∞–ª–∞–±–∞–∫–∏–µ–≤ –†–∞–º–∑–∞–Ω',
    '–ñ—É–º–∞–≥—É–ª–æ–≤ –¢–∞–ª–≥–∞—Ç',
    '–ò—Å–∞–∫–æ–≤ –†—É—Å–ª–∞–Ω',
    '–ö–∞–¥—ã—Ä–æ–≤ –≠–ª—å–¥–∞—Ä',
    '–õ–∞–∑–∞—Ä–µ–≤ –ú–∞–∫—Å–∏–º',
    '–ú–∏—Ä–∑–æ–µ–≤ –ë–∞—Ö—Ç–∏—ë—Ä',
    '–ù—É—Ä–º–∞—Ç–æ–≤ –ê–∑–∞—Ç',
    '–û—Ä–ª–æ–≤ –ò–ª—å—è',
    '–ü–µ—Ç—Ä–æ–≤ –°–µ—Ä–≥–µ–π',
    '–†–∞—Ö–∏–º–æ–≤ –®–∞—Ö—Ä–∏—ë—Ä',
    '–°–º–∏—Ä–Ω–æ–≤–∞ –û–ª—å–≥–∞',
    '–¢–∏–º–æ—Ñ–µ–µ–≤ –ê–Ω–¥—Ä–µ–π',
    '–£–º–∞—Ä–æ–≤ –ó–∞—É—Ä',
    '–§–µ–¥–æ—Ä–æ–≤ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω',
    '–•–∞–±–∏–±—É–ª–ª–∏–Ω –†–∏–Ω–∞—Ç',
    '–¶–æ–π –í–∏–∫—Ç–æ—Ä',
    '–ß–∏—Å—Ç—è–∫–æ–≤ –ê—Ä—Ç—ë–º',
    '–®–∞—Ä–∏–ø–æ–≤ –ê—Ä—Å–ª–∞–Ω',
    '–©–µ—Ä–±–∞–∫–æ–≤–∞ –ú–∞—Ä–∏—è',
  ]


  const initialRowData = users.map((fullName) => {
    const scores = {}
    dates.forEach((date) => {
      scores[date] = generateRandomScore()
    })
    return { fullName, ...scores }
  })

  const todayDate = new Date().toLocaleDateString('ru-RU')
  const todaySafe = todayDate.replace(/\./g, '_')

  const [rowData, setRowData] = useState(() =>
    initialRowData.map((row) =>
      !(todaySafe in row) ? { ...row, [todaySafe]: 0 } : row
    )
  )

  const baseFields = ['fullName']
  const allDateFieldsSet = new Set<string>()

  rowData.forEach((row) => {
    Object.keys(row).forEach((key) => {
      if (!baseFields.includes(key)) {
        allDateFieldsSet.add(key)
      }
    })
  })

  let allDateFields = Array.from(allDateFieldsSet).sort((a, b) => {
    if (a === todaySafe) return -1
    if (b === todaySafe) return 1
    return b.localeCompare(a)
  })

  // üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ –¥–∞—Ç–∞–º
  const columnsPerPage = 8
  const totalPages = Math.ceil(allDateFields.length / columnsPerPage)
  const [currentPage, setCurrentPage] = useState(1)

  const currentDateFields = allDateFields.slice(
    (currentPage - 1) * columnsPerPage,
    currentPage * columnsPerPage
  )

  const columnDefs = useMemo(() => {
    return [
      { field: 'fullName', headerName: '–§–ò–û', filter: true },
      ...currentDateFields.map((field) => ({
        field,
        width: 110,
        headerName: field.replace(/_/g, '.'),
        editable: field === todaySafe,
        valueSetter: (params: any) => {
          let value = Number(params.newValue)
          if (isNaN(value)) return false
          if (value < 0) value = 0
          if (value > 10) value = 10
          params.data[field] = value
          setRowData((prev) =>
            prev.map((r) =>
              r.fullName === params.data.fullName ? params.data : r
            )
          )
          return true
        },
      })),
    ]
  }, [rowData, currentDateFields, todaySafe])

  return (
    <div>
      <Pagination
        isCompact
        showControls
        total={totalPages}
        initialPage={1}
        page={currentPage}
        onChange={(page) => setCurrentPage(page)}
      />
      <div className="ag-theme-alpine mt-4">
        <AgGridReact
          rowData={rowData}
          columnDefs={columnDefs}
          domLayout="autoHeight"
          pagination={true}
          paginationPageSize={30}
          paginationPageSizeSelector={[5, 10, 15, 20, 25, 30, 40]}
        />
      </div>
    </div>
  )
}
