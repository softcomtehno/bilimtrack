import React, { useEffect } from "react";
import { WeekType, Teacher, Group, Classroom } from "@/shared/types";
import { Select } from "../ui/Select";
import { Button } from "../ui/Button";
import { FilterX } from "lucide-react";

interface ScheduleFiltersProps {
  weekType: WeekType | "–û–±–µ";
  setWeekType: (weekType: WeekType | "–û–±–µ") => void;
  teachers: Teacher[];
  groups: Group[];
  filteredGroups: Group[];
  classrooms: Classroom[];
  courses: { id: number; number: number; educationLevel?: string | number }[];
  selectedTeacherId: string | undefined;
  selectedGroupId: string | undefined;
  selectedClassroomId: string | undefined;
  selectedCourseId: string;
  setSelectedTeacherId: (id: string | undefined) => void;
  setSelectedGroupId: (id: string | undefined) => void;
  setSelectedClassroomId: (id: string | undefined) => void;
  setSelectedCourseId: (id: string) => void;
  resetFilters: () => void;

  // üî• –Ω–æ–≤—ã–π –ø—Ä–æ–ø—Å
  eduLevelsData: { id: string; name: string }[];
  selectedEduLevelId?: string;
  setSelectedEduLevelId?: (id: string | undefined) => void;
}

export const ScheduleFilters: React.FC<ScheduleFiltersProps> = ({
  weekType,
  setWeekType,
  teachers,
  groups,
  filteredGroups,
  classrooms,
  selectedCourseId,
  selectedTeacherId,
  selectedGroupId,
  selectedClassroomId,
  setSelectedCourseId,
  setSelectedTeacherId,
  setSelectedGroupId,
  setSelectedClassroomId,
  resetFilters,
  courses,
  selectedEduLevelId,
  setSelectedEduLevelId,
  eduLevelsData,
}) => {
  const hasActiveFilters =
    selectedTeacherId ||
    selectedGroupId ||
    selectedClassroomId ||
    weekType !== "–û–±–µ";

  const displayGroups = selectedCourseId ? filteredGroups : groups;

  useEffect(() => {
    if (selectedCourseId && selectedGroupId) {
      const groupExists = filteredGroups.some((g) => g.id === selectedGroupId);
      if (!groupExists) {
        setSelectedGroupId(filteredGroups[0]?.id || undefined);
      }
    }
  }, [selectedCourseId, filteredGroups, selectedGroupId, setSelectedGroupId]);

  // –°–±—Ä–æ—Å –∫—É—Ä—Å–∞ –∏ –≥—Ä—É–ø–ø—ã –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —É—Ä–æ–≤–Ω—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
  useEffect(() => {
    if (!selectedEduLevelId) {
      setSelectedCourseId("");
      setSelectedGroupId(undefined);
    }
  }, [selectedEduLevelId, setSelectedCourseId, setSelectedGroupId]);

  // –§–∏–ª—å—Ç—Ä—É–µ–º –∫—É—Ä—Å—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —É—Ä–æ–≤–Ω—é –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
  const filteredCourses = React.useMemo(() => {
    if (!selectedEduLevelId) return [] as typeof courses;
    return (courses || []).filter(
      (course) => String(course.educationLevel) === selectedEduLevelId
    );
  }, [courses, selectedEduLevelId]);

  // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –≥—Ä—É–ø–ø—ã
  const handleCourseChange = (value: string) => {
    setSelectedCourseId(value);
    const newFilteredGroups = groups.filter(
      (g) => g.course?.id?.toString() === value
    );
    setSelectedGroupId(newFilteredGroups[0]?.id || undefined);
  };

  const isEduLevelSelected = Boolean(selectedEduLevelId);

  return (
    <div
      role="region"
      aria-label="–§–∏–ª—å—Ç—Ä—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
      className="bg-white p-4 rounded-lg shadow-card mb-6"
    >
      <div className="flex flex-wrap gap-4 items-end">
        {eduLevelsData?.length > 0 && (
          <div className="w-full sm:w-48 flex">
            <Select
              label="–£—Ä–æ–≤–Ω–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"
              options={(eduLevelsData || []).map((lvl) => ({
                value: lvl.id,
                label: lvl.name,
              }))}
              value={selectedEduLevelId || ""}
              onChange={(value) => setSelectedEduLevelId?.(value || undefined)}
              // hideEmptyOption
            />
          </div>
        )}

        <div className="w-full sm:w-48 flex">
          <Select
            label="–ö—É—Ä—Å"
            options={filteredCourses.map((course) => ({
              value: String(course.id),
              label: `${course.number} –∫—É—Ä—Å`,
            }))}
            value={isEduLevelSelected ? selectedCourseId : ""}
            onChange={handleCourseChange}
            // hideEmptyOption
            disabled={!isEduLevelSelected}
          />
        </div>

        <div className="w-full sm:w-48">
          <Select
            label="–ì—Ä—É–ø–ø–∞"
            options={(displayGroups || []).map((group) => ({
              value: group.id,
              label: group.name,
            }))}
            value={
              isEduLevelSelected
                ? selectedGroupId || displayGroups[0]?.id || ""
                : ""
            }
            onChange={(value) => setSelectedGroupId(value || undefined)}
            disabled={!isEduLevelSelected}
            // hideEmptyOption
          />
        </div>

        <div className="w-full sm:w-48">
          <Select
            label="–¢–∏–ø –Ω–µ–¥–µ–ª–∏"
            options={[
              { value: "–û–±–µ", label: "–í—Å–µ –Ω–µ–¥–µ–ª–∏" },
              { value: "–ß–∏—Å–ª–∏—Ç–µ–ª—å", label: "–ß–∏—Å–ª–∏—Ç–µ–ª—å" },
              { value: "–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å", label: "–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å" },
            ]}
            value={weekType}
            onChange={(value) => setWeekType((value as WeekType) || "–û–±–µ")}
            hideEmptyOption
          />
        </div>

        <div className="w-full sm:w-64">
          <Select
            label="–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
            options={(teachers || []).map((teacher) => ({
              value: teacher.id,
              label: teacher.name,
            }))}
            value={selectedTeacherId || ""}
            onChange={(value) => setSelectedTeacherId(value || undefined)}
          />
        </div>

        <div className="w-full sm:w-48">
          <Select
            label="–ê—É–¥–∏—Ç–æ—Ä–∏—è"
            options={(classrooms || []).map((classroom) => ({
              value: classroom.id,
              label: classroom.name,
            }))}
            value={selectedClassroomId || ""}
            onChange={(value) => setSelectedClassroomId(value || undefined)}
          />
        </div>

        {hasActiveFilters && (
          <div className="w-full sm:w-auto">
            <Button
              variant="outline"
              size="sm"
              onClick={resetFilters}
              icon={<FilterX size={16} />}
              className="w-full sm:w-auto"
            >
              –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
            </Button>
          </div>
        )}
      </div>
    </div>
  );
};
