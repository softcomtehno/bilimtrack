import React, { useState, useEffect } from "react";
import { Plus, Calendar, AlertTriangle } from "lucide-react";
import { WeekType, ScheduleItem } from "@/shared/types";
import {
  Button,
  Card,
  Dialog,
  ScheduleExport,
  ScheduleFilters,
  ScheduleForm,
  ScheduleGrid,
} from "@/shared/ui/schedule";
import { useAppStore } from "@/app/store";
import { schedulesQueries } from "@/entities/schedules";

export const SchedulePage: React.FC = () => {
  const {
    teachers,
    groups,
    classrooms,
    subjects,
    addScheduleItem,
    updateScheduleItem,
    deleteScheduleItem,
    activeFilters,
    setActiveFilters,
    resetFilters,
  } = useAppStore();

  const {
    data: schedulesData,
    isError: schedulesError,
    isLoading: schedulesLoading,
  } = schedulesQueries.useGetSchedules();

  const [isFormOpen, setIsFormOpen] = useState(false);
  const [editItem, setEditItem] = useState<ScheduleItem | undefined>(undefined);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemToDelete, setItemToDelete] = useState<string | null>(null);
  const [weekType, setWeekType] = useState<WeekType | "–û–±–µ">(
    activeFilters.weekType || "–û–±–µ"
  );
  const [selectedTeacherId, setSelectedTeacherId] = useState<
    string | undefined
  >(activeFilters.teacherId);
  const [selectedGroupId, setSelectedGroupId] = useState<string | undefined>(
    activeFilters.groupId
  );
  const [selectedClassroomId, setSelectedClassroomId] = useState<
    string | undefined
  >(activeFilters.classroomId);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
  useEffect(() => {
    setActiveFilters({
      weekType: weekType !== "–û–±–µ" ? (weekType as WeekType) : undefined,
      teacherId: selectedTeacherId,
      groupId: selectedGroupId,
      classroomId: selectedClassroomId,
    });
  }, [
    weekType,
    selectedTeacherId,
    selectedGroupId,
    selectedClassroomId,
    setActiveFilters,
  ]);

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  const transformedSchedule: ScheduleItem[] = (schedulesData || []).map(
    (item) => ({
      id: String(item.id),
      dayOfWeek: item.dayOfWeek,
      weekType: item.weekType === "weekly" ? "–û–±–µ" : item.weekType, // –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏
      groupIds: [String(item.group.id)],
      teacherId: String(item.teacher.id),
      classroomId: String(item.room.id),
      subjectId: String(item.subject.id),
      lessonTime: {
        id: item.lessonTime.id,
        startTime: item.lessonTime.startTime,
        endTime: item.lessonTime.endTime,
      },
      lessonType: item.lessonType?.name ?? "",

      // üëá –ø–æ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤ ScheduleCell)
      subjectName: item.subject.name,
      teacherName: item.teacher.fullName,
      groupNames: [item.group.name],
      classroomName: `${item.room.number} (${item.room.building})`,
    })
  );

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const handleAddItem = () => {
    setEditItem(undefined);
    setIsFormOpen(true);
  };

  const handleEditItem = (item: ScheduleItem) => {
    setEditItem(item);
    setIsFormOpen(true);
  };

  const handleDeleteItem = (id: string) => {
    setItemToDelete(id);
    setIsDeleteDialogOpen(true);
  };

  const confirmDelete = () => {
    if (itemToDelete) {
      deleteScheduleItem(itemToDelete);
      setIsDeleteDialogOpen(false);
      setItemToDelete(null);
    }
  };

  const handleFormSubmit = (data: ScheduleItem) => {
    if (editItem) {
      updateScheduleItem(data);
    } else {
      addScheduleItem(data);
    }
    setIsFormOpen(false);
    setEditItem(undefined);
  };

  const handleResetFilters = () => {
    setWeekType("–û–±–µ");
    setSelectedTeacherId(undefined);
    setSelectedGroupId(undefined);
    setSelectedClassroomId(undefined);
    resetFilters();
  };

  if (schedulesLoading) {
    return <div className="text-center py-10 text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  if (schedulesError) {
    return (
      <div className="text-center py-10 text-red-600">
        –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
      </div>
    );
  }

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-2xl font-bold mb-2">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π</h1>
          <p className="text-gray-600">
            –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π
          </p>
        </div>
        <div className="flex space-x-3">
          <ScheduleExport schedule={transformedSchedule} />
          <Button onClick={handleAddItem} icon={<Plus size={16} />}>
            –î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ
          </Button>
        </div>
      </div>

      <ScheduleFilters
        weekType={weekType}
        setWeekType={setWeekType}
        teachers={teachers}
        groups={groups}
        classrooms={classrooms}
        selectedTeacherId={selectedTeacherId}
        selectedGroupId={selectedGroupId}
        selectedClassroomId={selectedClassroomId}
        setSelectedTeacherId={setSelectedTeacherId}
        setSelectedGroupId={setSelectedGroupId}
        setSelectedClassroomId={setSelectedClassroomId}
        resetFilters={handleResetFilters}
      />

      {transformedSchedule.length === 0 ? (
        <Card className="text-center py-12">
          <Calendar size={48} className="mx-auto mb-4 text-gray-400" />
          <h2 className="text-xl font-semibold mb-2">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –ø—É—Å—Ç–æ</h2>
          <p className="text-gray-500 mb-6 max-w-md mx-auto">
            –î–æ–±–∞–≤—å—Ç–µ –∑–∞–Ω—è—Ç–∏—è –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —Å –ø–æ–º–æ—â—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞.
          </p>
          <Button onClick={handleAddItem} icon={<Plus size={16} />}>
            –î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ
          </Button>
        </Card>
      ) : (
        <Card>
          <ScheduleGrid
            schedule={transformedSchedule}
            weekType={weekType}
            onEditItem={handleEditItem}
            onDeleteItem={handleDeleteItem}
            filteredGroupId={selectedGroupId}
            filteredTeacherId={selectedTeacherId}
            filteredClassroomId={selectedClassroomId}
          />
        </Card>
      )}

      <ScheduleForm
        isOpen={isFormOpen}
        onClose={() => setIsFormOpen(false)}
        onSubmit={handleFormSubmit}
        editItem={editItem}
        teachers={teachers}
        groups={groups}
        classrooms={classrooms}
        subjects={subjects}
        schedule={transformedSchedule}
      />

      <Dialog
        isOpen={isDeleteDialogOpen}
        onClose={() => setIsDeleteDialogOpen(false)}
        title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"
      >
        <div className="mb-6">
          <div className="flex items-center text-warning-600 mb-3">
            <AlertTriangle size={24} className="mr-2" />
            <p className="font-medium">
              –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ?
            </p>
          </div>
          <p className="text-gray-600 text-sm">
            –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å. –ó–∞–Ω—è—Ç–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –∏–∑
            —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
          </p>
        </div>
        <div className="flex justify-end space-x-3">
          <Button
            variant="outline"
            onClick={() => setIsDeleteDialogOpen(false)}
          >
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button variant="danger" onClick={confirmDelete}>
            –£–¥–∞–ª–∏—Ç—å
          </Button>
        </div>
      </Dialog>
    </div>
  );
};
